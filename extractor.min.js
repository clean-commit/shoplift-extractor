!function(){const e=document.createElement("script");e.textContent="\n    (function() {\n      // Show extraction status to user\n      const showStatus = (msg, isError = false) => {\n        const statusDiv = document.createElement('div');\n        statusDiv.style.position = 'fixed';\n        statusDiv.style.top = '10px';\n        statusDiv.style.left = '50%';\n        statusDiv.style.transform = 'translateX(-50%)';\n        statusDiv.style.background = isError ? '#f44336' : '#6d28d9';\n        statusDiv.style.color = 'white';\n        statusDiv.style.padding = '10px 20px';\n        statusDiv.style.borderRadius = '5px';\n        statusDiv.style.zIndex = '9999';\n        statusDiv.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';\n        statusDiv.textContent = msg;\n        document.body.appendChild(statusDiv);\n\n        setTimeout(() => {\n          statusDiv.remove();\n        }, isError ? 5000 : 3000);\n      };\n\n      // Check if elements are loaded and ready for extraction\n      const waitForElements = (selector, timeout = 5000, interval = 200) => {\n        return new Promise((resolve, reject) => {\n          const startTime = Date.now();\n          \n          const checkElements = () => {\n            const elements = document.querySelectorAll(selector);\n            if (elements.length > 0) {\n              resolve(elements);\n              return;\n            }\n            \n            if (Date.now() - startTime > timeout) {\n              reject(new Error(`Elements not found: ${selector}`));\n              return;\n            }\n            \n            setTimeout(checkElements, interval);\n          };\n          \n          checkElements();\n        });\n      };\n\n      // Extract test name and store name\n      const getTestInfo = () => {\n        let storeName = '';\n        let testName = '';\n        \n        try {\n          // Try to get store name from breadcrumbs or navigation\n          const storeElements = document.querySelectorAll('.navbar-brand, h5.headline-bold');\n          for (const el of storeElements) {\n            const text = el.textContent.trim();\n            if (text && !text.includes('debut-customized') && !text.includes('overland-addict')) {\n              storeName = text;\n              break;\n            }\n          }\n          \n          // Get store from URL if not found in DOM\n          if (!storeName) {\n            const storeMatch = window.location.href.match(/store\\/([^\\/]+)/);\n            if (storeMatch && storeMatch[1]) {\n              storeName = decodeURIComponent(storeMatch[1]);\n            }\n          }\n          \n          // Find test name in headings\n          const testHeadings = document.querySelectorAll('h1, h2, h3, h4');\n          for (const heading of testHeadings) {\n            const text = heading.textContent.trim();\n            if (text && !text.includes('Performance overview') && \n                !text.includes('Traffic overview') && \n                !text.includes('Device performance')) {\n              testName = text;\n              break;\n            }\n          }\n        } catch (error) {\n          console.error('Error extracting test info:', error);\n        }\n\n        return {\n          storeName: storeName || 'Unknown Store',\n          testName: testName || 'Unknown Test'\n        };\n      };\n\n      // Extract test goal/type\n      const getTestType = () => {\n        try {\n          const goalLabels = document.querySelectorAll('.label-blue.label-outline');\n          for (const label of goalLabels) {\n            if (label.textContent.includes('GOAL')) {\n              // Look for nearby text to determine goal type\n              const metrics = document.querySelectorAll('[data-bs-original-title]');\n              for (const metric of metrics) {\n                if (metric.getAttribute('data-bs-original-title')?.includes('Conversion')) {\n                  return 'Conversion Rate Optimization';\n                }\n                if (metric.getAttribute('data-bs-original-title')?.includes('Revenue')) {\n                  return 'Revenue Optimization';\n                }\n                if (metric.getAttribute('data-bs-original-title')?.includes('Average order')) {\n                  return 'Average Order Value Optimization';\n                }\n              }\n              return 'Conversion Rate Optimization'; // Default if specific type not found\n            }\n          }\n          return 'Unknown Goal';\n        } catch (error) {\n          console.error('Error extracting test type:', error);\n          return 'Unknown Goal';\n        }\n      };\n\n      // Extract test overview (dates, status, etc.)\n      const getTestOverview = () => {\n        const overview = {\n          status: 'Unknown',\n          dateCreated: '',\n          dateRange: '',\n          duration: ''\n        };\n\n        try {\n          // Find test status\n          const statusLabels = document.querySelectorAll('.label-emerald, .label-blue, .label-red');\n          for (const label of statusLabels) {\n            const text = label.textContent.trim();\n            if (text.includes('Live') || text.includes('Active') || text.includes('Completed') || text.includes('Draft')) {\n              overview.status = text;\n              break;\n            }\n          }\n\n          // Find date created\n          const dateLabels = document.querySelectorAll('label');\n          for (const label of dateLabels) {\n            const text = label.textContent.trim();\n            if (text.includes('Date created:')) {\n              overview.dateCreated = text.replace('Date created:', '').trim();\n              break;\n            }\n          }\n        } catch (error) {\n          console.error('Error extracting test overview:', error);\n        }\n\n        return overview;\n      };\n\n      // Extract metrics from tables\n      const extractMetrics = () => {\n        const metrics = {\n          overall: {},\n          byDevice: {},\n          byVisitorType: {}\n        };\n\n        try {\n          // Extract main metrics from performance tables\n          const tables = document.querySelectorAll('.performance-table');\n          \n          tables.forEach(table => {\n            // First, identify the type of table by examining its headers\n            const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent.trim());\n            const isDeviceTable = headers.includes('Device');\n            const isVisitorTable = headers[0]?.includes('Visitors') || headers[0]?.includes('visitor');\n            \n            if (isDeviceTable) {\n              // Map column headers to their indices for more reliable data extraction\n              const headerMap = {};\n              table.querySelectorAll('thead th').forEach((th, index) => {\n                const headerText = th.textContent.trim().toLowerCase();\n                \n                // Handle special cases with data attributes\n                if (th.querySelector('[data-bs-original-title=\"Conversion rate\"]')) {\n                  headerMap['cvr'] = index;\n                } else if (th.querySelector('[data-bs-original-title=\"Average order value\"]')) {\n                  headerMap['aov'] = index;\n                } else if (th.querySelector('[data-bs-original-title=\"Revenue per visitor\"]')) {\n                  headerMap['rpv'] = index;\n                } else if (th.querySelector('[data-bs-original-title=\"Add to cart rate\"]')) {\n                  headerMap['acr'] = index;\n                } else if (th.querySelector('[data-bs-original-title=\"Clickthrough rate\"]')) {\n                  headerMap['ctr'] = index;\n                } else if (headerText.includes('device')) {\n                  headerMap['device'] = index;\n                } else if (headerText.includes('variant')) {\n                  headerMap['variant'] = index;\n                } else if (headerText.includes('visitors')) {\n                  headerMap['visitors'] = index;\n                } else if (headerText.includes('clicks')) {\n                  headerMap['clicks'] = index;\n                } else if (headerText.includes('cart adds')) {\n                  headerMap['cartAdds'] = index;\n                } else if (headerText.includes('bounce')) {\n                  headerMap['bounceRate'] = index;\n                } else if (headerText.includes('orders')) {\n                  headerMap['orders'] = index;\n                } else if (headerText.includes('revenue') && !headerText.includes('per')) {\n                  headerMap['revenue'] = index;\n                }\n              });\n              \n              // Extract device metrics\n              const deviceRows = table.querySelectorAll('tbody');\n              \n              deviceRows.forEach(tbody => {\n                // Get device name from the first cell\n                const deviceNameEl = tbody.querySelector('th span');\n                if (!deviceNameEl) return;\n                \n                const deviceName = deviceNameEl.textContent.trim();\n                if (!deviceName || deviceName === 'Variant') return;\n                \n                metrics.byDevice[deviceName] = {\n                  original: {},\n                  variant: {},\n                  change: {}\n                };\n                \n                // Get metrics for original and variant\n                const rows = tbody.querySelectorAll('tr');\n                rows.forEach(row => {\n                  const rowType = row.querySelector('th')?.textContent.trim();\n                  \n                  if (rowType && rowType.includes('Original')) {\n                    const cells = row.querySelectorAll('td');\n                    const data = {};\n                    \n                    // Extract metrics based on the mapped column indices\n                    Object.keys(headerMap).forEach(key => {\n                      if (key !== 'device' && key !== 'variant') {\n                        const index = headerMap[key] - 2; // Adjust for th columns\n                        if (cells[index]) {\n                          data[key] = cells[index].textContent.trim();\n                        }\n                      }\n                    });\n                    \n                    metrics.byDevice[deviceName].original = data;\n                  } \n                  else if (rowType && rowType.includes('Variant')) {\n                    const cells = row.querySelectorAll('td');\n                    const data = {};\n                    const changes = {};\n                    \n                    // Extract metrics and changes\n                    Object.keys(headerMap).forEach(key => {\n                      if (key !== 'device' && key !== 'variant') {\n                        const index = headerMap[key] - 2; // Adjust for th columns\n                        if (cells[index]) {\n                          data[key] = cells[index].textContent.split(' ')[0].trim();\n                          \n                          // Look for change labels\n                          const changeLabel = cells[index].querySelector('.label-tint');\n                          if (changeLabel) {\n                            changes[key] = changeLabel.textContent.trim();\n                          }\n                        }\n                      }\n                    });\n                    \n                    metrics.byDevice[deviceName].variant = data;\n                    metrics.byDevice[deviceName].change = changes;\n                  }\n                });\n              });\n            } else if (isVisitorTable) {\n              // Similar approach for visitor tables as with device tables\n              const headerMap = {};\n              table.querySelectorAll('thead th').forEach((th, index) => {\n                const headerText = th.textContent.trim().toLowerCase();\n                \n                if (th.querySelector('[data-bs-original-title=\"Conversion rate\"]')) {\n                  headerMap['cvr'] = index;\n                } else if (headerText.includes('visitors')) {\n                  headerMap['visitors'] = index;\n                } else if (headerText.includes('orders')) {\n                  headerMap['orders'] = index;\n                } else if (headerText.includes('revenue') && !headerText.includes('per')) {\n                  headerMap['revenue'] = index;\n                }\n              });\n              \n              const visitorRows = table.querySelectorAll('tbody');\n              \n              visitorRows.forEach(tbody => {\n                const visitorTypeEl = tbody.querySelector('th span');\n                if (!visitorTypeEl) return;\n                \n                const visitorType = visitorTypeEl.textContent.trim();\n                if (!visitorType || visitorType === 'Variant') return;\n                \n                metrics.byVisitorType[visitorType] = {\n                  original: {},\n                  variant: {},\n                  change: {}\n                };\n                \n                const rows = tbody.querySelectorAll('tr');\n                rows.forEach(row => {\n                  const rowType = row.querySelector('th')?.textContent.trim();\n                  \n                  if (rowType && rowType.includes('Original')) {\n                    const cells = row.querySelectorAll('td');\n                    const data = {};\n                    \n                    Object.keys(headerMap).forEach(key => {\n                      if (key !== 'visitorType' && key !== 'variant') {\n                        const index = headerMap[key] - 2;\n                        if (cells[index]) {\n                          data[key] = cells[index].textContent.trim();\n                        }\n                      }\n                    });\n                    \n                    metrics.byVisitorType[visitorType].original = data;\n                  } \n                  else if (rowType && rowType.includes('Variant')) {\n                    const cells = row.querySelectorAll('td');\n                    const data = {};\n                    const changes = {};\n                    \n                    Object.keys(headerMap).forEach(key => {\n                      if (key !== 'visitorType' && key !== 'variant') {\n                        const index = headerMap[key] - 2;\n                        if (cells[index]) {\n                          data[key] = cells[index].textContent.split(' ')[0].trim();\n                          \n                          const changeLabel = cells[index].querySelector('.label-tint');\n                          if (changeLabel) {\n                            changes[key] = changeLabel.textContent.trim();\n                          }\n                        }\n                      }\n                    });\n                    \n                    metrics.byVisitorType[visitorType].variant = data;\n                    metrics.byVisitorType[visitorType].change = changes;\n                  }\n                });\n              });\n            } else {\n              // Overall metrics from variant cards\n              const variantCards = document.querySelectorAll('.test-report-variant-card-stats');\n              if (variantCards.length >= 2) {\n                const originalCard = variantCards[0];\n                const variantCard = variantCards[1];\n                \n                // Get labels and values from cards\n                const originalLabels = originalCard.querySelectorAll('.label-grey.label-sm');\n                const originalValues = originalCard.querySelectorAll('.headline-bold');\n                const variantLabels = variantCard.querySelectorAll('.label-grey.label-sm');\n                const variantValues = variantCard.querySelectorAll('.headline-bold');\n                \n                // Extract metrics\n                metrics.overall.original = {};\n                metrics.overall.variant = {};\n                metrics.overall.change = {};\n                \n                // Process original values\n                for (let i = 0; i < originalLabels.length; i++) {\n                  const label = originalLabels[i].textContent.trim().toLowerCase();\n                  if (label && originalValues[i]) {\n                    const value = originalValues[i].textContent.trim().split(' ')[0];\n                    metrics.overall.original[label] = value;\n                  }\n                }\n                \n                // Process variant values and changes\n                for (let i = 0; i < variantLabels.length; i++) {\n                  const label = variantLabels[i].textContent.trim().toLowerCase();\n                  if (label && variantValues[i]) {\n                    // Get main value\n                    const valueText = variantValues[i].textContent.trim();\n                    const value = valueText.split(' ')[0];\n                    metrics.overall.variant[label] = value;\n                    \n                    // Get change value if present\n                    const changeLabel = variantValues[i].querySelector('.label-tint');\n                    if (changeLabel) {\n                      metrics.overall.change[label] = changeLabel.textContent.trim();\n                    }\n                  }\n                }\n              }\n            }\n          });\n        } catch (error) {\n          console.error('Error extracting metrics:', error);\n        }\n\n        return metrics;\n      };\n\n      // Extract traffic information from charts/tables\n      const extractTrafficInfo = () => {\n        const trafficInfo = {\n          sources: {},\n          devices: {}\n        };\n\n        try {\n          // Device distribution\n          // Look for pie charts or device distribution tables\n          const trafficSection = document.querySelector('h4.headline-bold + .d-flex');\n          if (trafficSection) {\n            // Extract data from tooltips or visible data points\n            const deviceTooltips = document.querySelectorAll('.w-170px');\n            deviceTooltips.forEach(deviceTooltip => {\n              const deviceRows = deviceTooltip.querySelectorAll('.flex.justify-between');\n              deviceRows.forEach(row => {\n                const deviceName = row.querySelector('.flex.gap-4px')?.textContent.trim();\n                const percentage = row.querySelector('.label-black')?.textContent.trim();\n                if (deviceName && percentage) {\n                  trafficInfo.devices[deviceName] = percentage;\n                }\n              });\n            });\n          }\n          \n          // Look for traffic source data in tables - scan all tables\n          // Find a table that has channel/source information\n          const channelTables = document.querySelectorAll('.performance-table');\n          channelTables.forEach(table => {\n            // Look for tables with \"Channel\" or traffic source headers\n            const headers = Array.from(table.querySelectorAll('th')).map(th => \n              th.textContent.trim().toLowerCase());\n            \n            const isChannelTable = headers.some(h => \n              h.includes('channel') || h.includes('source') || h.includes('traffic'));\n            \n            if (isChannelTable || headers.length > 0) {\n              // Process each tbody as a potential traffic source\n              const channelRows = table.querySelectorAll('tbody');\n              \n              channelRows.forEach(tbody => {\n                const rows = tbody.querySelectorAll('tr');\n                \n                // Try to identify channel name from first row\n                const firstRow = rows[0];\n                if (!firstRow) return;\n                \n                const sourceName = firstRow.querySelector('th span')?.textContent.trim();\n                if (!sourceName || sourceName.includes('All channels')) return;\n                \n                // Extract metrics for this traffic source\n                const sourceMetrics = {};\n                const cells = firstRow.querySelectorAll('td');\n                \n                // Map common metrics by position\n                if (cells.length >= 1) sourceMetrics.visitors = cells[0]?.textContent.trim() || '0';\n                if (cells.length >= 3) sourceMetrics.conversionRate = cells[2]?.textContent.trim().split(' ')[0] || '0%';\n                if (cells.length >= 4) sourceMetrics.revenue = cells[3]?.textContent.trim().split(' ')[0] || '$0';\n                \n                trafficInfo.sources[sourceName] = sourceMetrics;\n                \n                // Check other rows for more detailed metrics\n                if (rows.length > 1) {\n                  const variantData = {};\n                  const originalData = {};\n                  \n                  rows.forEach(row => {\n                    const rowTitle = row.querySelector('th')?.textContent.trim();\n                    if (rowTitle && rowTitle.includes('Variant')) {\n                      const cells = row.querySelectorAll('td');\n                      if (cells.length >= 1) variantData.visitors = cells[0]?.textContent.trim() || '0';\n                      if (cells.length >= 3) variantData.conversionRate = cells[2]?.textContent.trim().split(' ')[0] || '0%';\n                    } \n                    else if (rowTitle && rowTitle.includes('Original')) {\n                      const cells = row.querySelectorAll('td');\n                      if (cells.length >= 1) originalData.visitors = cells[0]?.textContent.trim() || '0';\n                      if (cells.length >= 3) originalData.conversionRate = cells[2]?.textContent.trim().split(' ')[0] || '0%';\n                    }\n                  });\n                  \n                  if (Object.keys(originalData).length > 0) {\n                    trafficInfo.sources[sourceName].original = originalData;\n                  }\n                  if (Object.keys(variantData).length > 0) {\n                    trafficInfo.sources[sourceName].variant = variantData;\n                  }\n                }\n              });\n            }\n          });\n        } catch (error) {\n          console.error('Error extracting traffic info:', error);\n        }\n\n        return trafficInfo;\n      };\n\n      // Main function to extract all data and generate JSON\n      const extractTestData = async () => {\n        showStatus('Extracting Shoplift test data...');\n        \n        try {\n          // Wait for key elements to be loaded\n          await waitForElements('.headline-bold', 10000);\n          await waitForElements('.performance-table', 10000);\n          \n          // Add a little delay to ensure Vue has finished rendering\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Extract all data\n          const testInfo = getTestInfo();\n          const testType = getTestType();\n          const testOverview = getTestOverview();\n          const metrics = extractMetrics();\n          const trafficInfo = extractTrafficInfo();\n          \n          // Compile into final JSON structure\n          const testData = {\n            storeName: testInfo.storeName,\n            testName: testInfo.testName,\n            testType: testType,\n            testOverview: testOverview,\n            metrics: metrics,\n            traffic: trafficInfo\n          };\n          \n          // Generate downloadable JSON\n          const jsonString = JSON.stringify(testData, null, 2);\n          const blob = new Blob([jsonString], {type: 'application/json'});\n          const url = URL.createObjectURL(blob);\n          \n          // Create download link\n          const downloadLink = document.createElement('a');\n          downloadLink.href = url;\n          downloadLink.download = `shoplift-test-${testInfo.testName.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${new Date().toISOString().slice(0,10)}.json`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n          \n          showStatus('Test data extracted successfully!');\n        } catch (error) {\n          console.error('Error extracting test data:', error);\n          showStatus(`Error extracting test data: ${error.message}`, true);\n        }\n      };\n      \n      // Start the extraction process\n      extractTestData();\n    })();\n  ",document.body.appendChild(e),e.remove()}();